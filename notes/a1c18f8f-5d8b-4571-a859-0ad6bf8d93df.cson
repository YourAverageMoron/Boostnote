createdAt: "2019-03-27T14:45:15.874Z"
updatedAt: "2019-03-28T10:04:26.968Z"
type: "MARKDOWN_NOTE"
folder: "e18bbc0c08e12d905b86"
title: "Appspam integration test harnes research"
tags: []
content: '''
  # Appspam integration test harnes research
  
  [Appspam Integration - GitHub](https://github.com/clearswift/ERT-appspam-integration)
  
  The idea of these tests were origionally to test each part of appspam so that we can maintain functionality when we rewrite appspam.
  
  They work by creating a docker instance of the milter which is configured withing the using a config builder.
  ```
  config_builder = ConfigBuilder()
  
  config_builder.spam_policy('jemdsuspectedspam', 'reject')
  config_builder.spam_policy('jemdconfirmedspam', 'reject')
  MilterTest.write_config(config_builder)
  
  restart_appspam(start_of_test)
  ```
  
  The tests work by mimicing the SMTP steps, e.g:
  ```
  ### self is the MilterTest we configured earlier
  
  self \\
      .connect(connect_options) \\
      .hello() \\ 
      .mail_from() \\
      .recipient() \\
      .send_headers(custom_header['headers']) \\
      .body(body) \\
      .end_body(headers, SMFIR_REPLYCODE)
  ```
  
  Each of these methods performs the send and the verification e.g:
  ```
  def send_headers(self, headers):
      self.buffered_milter.send_headers(headers)
      self.buffered_milter.send(SMFIC_EOH)
  
      self.verify_response(self.buffered_milter, SMFIR_CONTINUE, {})
  
      return self
  ```
  
  We could potentially remove some of the assertions from the tests and replace the end_body method with one that counts if spam has been detected allowing us to send emails through the gateway ad detect if it was detected by the different configuration settings. 
'''
linesHighlighted: []
isStarred: false
isTrashed: false
