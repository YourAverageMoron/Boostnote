createdAt: "2019-05-27T15:51:40.354Z"
updatedAt: "2019-05-27T16:56:07.349Z"
type: "MARKDOWN_NOTE"
folder: "07413230992e30754bd9"
title: "call(), apply() and bind()"
tags: [
  "Computer_Science"
  "JavaScript"
]
content: '''
  # `call(), apply() and bind()` 
  
  All functions have access to the `call(), apply() and bind()` methods.
  
  
  ## `bind()`
  ```js
  var person = {
    firstname : 'Dave',
    surname : 'Smith',
    getFullName: function() {
      var fullname = this.firstname + ' ' + this.surname;
      return fullname
    }
  }
  
  var logName = function(){
    console.log(`Logged: ` + this.getFullName());
  }
  
  logName(); // throws an error because this.getFullName() is not defined
  
  var logPersonName = logName.bind(person); 
  logPersonName(); // Logged: Dave Smith
  ```
  `var logPersonName = logName.bind(person); ` will create a new logName object and store it as logPersonName, but when logPersonName is envoked, instead of the global object being passed into the execution context, `person` is passed in insead; therefore `this.getFullName` is defined.
  
  `bind()` essentially changes what the this variable points to.
  
  #### You can bind straight after creating a funciton:
  ```js
  var person = {
    firstname : 'Dave',
    surname : 'Smith',
    getFullName: function() {
      var fullname = this.firstname + ' ' + this.surname;
      return fullname
    }
  }
  
  var logName = function(){
    console.log(`Logged: ` + this.getFullName());
  }.bind(person);
  
  logName(); // Logged: Dave Smith
  ```
  
  ---
  
  ## `call()`
  ```js
  var person = {
    firstname : 'Dave',
    surname : 'Smith',
    getFullName: function() {
      var fullname = this.firstname + ' ' + this.surname;
      return fullname
    }
  }
  
  var logName = function(){
    console.log(`Logged: ` + this.getFullName());
  }
  
  logName() // throws an error because this.getFullName() is not defined
  logName.call(person); // Logged: Dave Smith
  ```
  `call()` allows you to call a function, but provide it with a `this` variable.
  
  #### You can pass parameters:
  ```js
  var person = {
    firstname : 'Dave',
    surname : 'Smith',
    getFullName: function() {
      var fullname = this.firstname + ' ' + this.surname;
      return fullname
    }
  }
  
  var logName = function(param, param2){
    console.log(`Logged: ` + this.getFullName() + ' ' + param + ' ' + param2); 
  }
  
  logName.call(person, "something", 31); // Logged: Dave Smith something 31
  ```
  
  Where `bind()` just copies a function, `call()` actually envokes the function and decides what the `this` variable should be.
  
  ---
  
  ## `apply()`
  ```js
  var person = {
    firstname : 'Dave',
    surname : 'Smith',
    getFullName: function() {
      var fullname = this.firstname + ' ' + this.surname;
      return fullname
    }
  }
  
  var logName = function(param, param2){
    console.log(`Logged: ` + this.getFullName() + ' ' + param + ' ' + param2); 
  }
  
  logName.apply(person, ["something", 31]); // Logged: Dave Smith something 31
  ```
  
  `apply()` is pretty much the same as `call()`, but it takes an array of arguments, instead of just listing them.
  The array can be more useful in some instances.
  
  ---
  
  ## Function borrowing
  ```js
  var person = {
    firstname : 'Dave',
    surname : 'Smith',
    getFullName: function() {
      var fullname = this.firstname + ' ' + this.surname;
      return fullname
    }
  }
  
  var person2 = {
    firstname : 'James',
    surname : 'Blunt'
  }
  
  person.getFullName.apply(person2); // Returns: James Blunt
  ```
  This allows you to grab methods from other objects.
  
  ---
  
  ## Function currying
  
  Currying invilves breaking down a function that takes multiple arguments into a series of functions that take part of the arguments.
  
  ```js
  function multiply(a,b){
    return a * b;
  }
  
  var multiplyByTwo = multiply.bind(this, 2);
  
  multiplyByTwo(3) // Returns: 6
  ```
  This will set perminent values to the parameters of a function.
  
  #### Other ways of doing this:
  ```js
  function multiply(a,b){
    return function(b) {
      return a * b;
    }
  }
  var multiplyByTwo = multiply(2)
  multiplyByTwo(3) // Returns: 6
  ```
  But notice that this other way of currying requires you to edit the multiply function, whereas using `bind()` does not.
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
